import logging
from typing import Dict, List, Any, Optional
import os
from dotenv import load_dotenv
import pandas as pd
from utils.model_adapter import get_llm_instance
from agents.rag_agent import RAGAgent

logger = logging.getLogger("WritingAgent")
load_dotenv()

class WritingAgent:
    def __init__(self, provider: str = "openai", model_id: str = "gpt-3.5-turbo", api_key: Optional[str] = None):
        self.llm = get_llm_instance(provider, model_id, api_key)
        self.rag_agent = RAGAgent()

    def write_section(self, section_name: str, section_points: List[str], relevant_texts: List[str]) -> str:
        """Write a section of the academic report"""
        prompt = f"""
        Write a {section_name} section for an academic report based on the following points:
        {', '.join(section_points)}
        
        Use the following relevant texts as references:
        {relevant_texts}
        
        Follow academic writing style and use in-text citations in APA format.
        """
        
        try:
            response = self.llm.invoke(prompt)
            content = response.content if hasattr(response, 'content') else response
            return content
        except Exception as e:
            logger.error(f"Error writing {section_name} section: {e}")
            return f"Error writing {section_name} section: {e}"

    def format_apa_citation(self, article: Dict[str, Any]) -> str:
        """Format article information as APA citation"""
        authors = article.get('authors', 'Unknown Author')
        year = article.get('year', 'n.d.')
        title = article.get('title', 'Unknown Title')
        journal = article.get('journal', 'arXiv')
        url = article.get('url', '')
        
        return f"{authors} ({year}). {title}. {journal}. {url}"

    def write_report(self, research_plan: Dict[str, Any], csv_path: str) -> Dict[str, Any]:
        """Write complete academic report with LaTeX formatting"""
        try:
            # Read article information
            df = pd.read_csv(csv_path)
            latex_plan = research_plan.get('plan', {}).get('latex_report_plan', {})
            
            sections = {}
            references = []
            
            # Write each section using the plan and RAG
            for section, points in latex_plan.items():
                # Get relevant content for this section using RAG
                query = " ".join(points)
                relevant_texts = self.rag_agent.query_knowledge_base(query)
                
                # Write section content
                section_content = self.write_section(section, points, relevant_texts)
                sections[section] = section_content
                
            # Collect citations and format references
            for _, article in df.iterrows():
                references.append(self.format_apa_citation(article))
            
            # Combine into final LaTeX document
            latex_document = self.create_latex_document(sections, references)
            
            return {
                "sections": sections,
                "references": references,
                "latex_document": latex_document
            }
            
        except Exception as e:
            logger.error(f"Error writing report: {e}")
            return {"error": str(e)}

    def create_latex_document(self, sections: Dict[str, str], references: List[str]) -> str:
        """Create complete LaTeX document"""
        latex_template = """\\documentclass{article}
\\usepackage{natbib}
\\usepackage{hyperref}

\\title{Research Report}
\\author{Generated by AI Research Assistant}
\\date{\\today}

\\begin{document}
\\maketitle

\\section{Introduction}
%s

\\section{Literature Review}
%s

\\section{Methodology}
%s

\\section{Results and Discussion}
%s

\\section{Conclusion}
%s

\\section{References}
\\begin{thebibliography}{99}
%s
\\end{thebibliography}

\\end{document}
"""
        # Format references in LaTeX bibliography style
        formatted_refs = "\n".join([f"\\bibitem{{{i}}} {ref}" for i, ref in enumerate(references, 1)])
        
        # Fill template with section contents
        return latex_template % (
            sections.get('introduction', 'Introduction content missing'),
            sections.get('literature_review', 'Literature review content missing'),
            sections.get('methodology', 'Methodology content missing'),
            sections.get('results_discussion', 'Results and discussion content missing'),
            sections.get('conclusion', 'Conclusion content missing'),
            formatted_refs
        )